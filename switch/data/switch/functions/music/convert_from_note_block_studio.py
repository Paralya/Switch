
## Python script that converts datapacks made with the "Note Block Studio" program to another format

# Stop if the execution is not in the same folder as the script
import os
if os.getcwd() != os.path.dirname(os.path.realpath(__file__)):
	print("Please execute this script in the same folder as the script")
	exit()
	pass

## Setup
import shutil
import zipfile
INPUTS_FOLDER = "script_inputs/"
FINAL_ZIP_FILE = "../../../../../switch_musics.zip"
ALL_BPM = 40

# Score objectives
objectives = []

# With zip file opening
with zipfile.ZipFile(FINAL_ZIP_FILE + ".git", "w") as zip_file:

	# For each .zip file in the input folder
	for file in os.listdir(INPUTS_FOLDER):
		if file.endswith(".zip"):

			# Open the file
			length = 0
			bpm = 80
			with zipfile.ZipFile(INPUTS_FOLDER + file, "r") as zip_file_to_read:

				# Copy every file from the functions folder of zip_file_to_read to the one in the zip_file
				for file_to_copy in zip_file_to_read.namelist():
					if "switch/functions/" in file_to_copy and "notes" in file_to_copy and file_to_copy.endswith(".mcfunction"):

						# Keep playsound lines
						file_content = zip_file_to_read.read(file_to_copy).decode("utf-8").split("\n")

						# Get a higher volume #/playsound minecraft:block.note_block.iron_xylophone record @s ^0 ^ ^ 0.20 0.707107 1
						playsounds = []
						for i, line in enumerate(file_content):
							if line.startswith("playsound"):
								playsound = line.split(" ")
								playsound[7] = str(round(float(playsound[7]) * 1, 5))
								playsounds.append(" ".join(playsound))
						file_content = "\n".join(playsounds)

						# Write file
						zip_file.writestr(file_to_copy.replace("functions/","functions/music/").replace("notes/",""), file_content.encode("utf-8"))

						# Remember length if higher
						length = max(length, int(file_to_copy.split("/")[-1].split(".")[0]))
					
					elif "load.mcfunction" in file_to_copy:
						bpm = int(zip_file_to_read.read(file_to_copy).decode("utf-8").split(" ")[-1])

			# Add this objective
			objectives.append((file.replace(".zip",""), length, bpm))

	# Add a pack.mcmeta file
	zip_file.writestr("pack.mcmeta", """{
	"pack": {
		"pack_format": 18,
		"description": "Musics made with NoteBlock Studio"
	}
}
""")

# Duplicate .git file
shutil.copyfile(FINAL_ZIP_FILE + ".git", FINAL_ZIP_FILE)
os.remove(FINAL_ZIP_FILE + ".git")

# Write load file
with open("load.mcfunction", "w", encoding="utf-8") as load_file:

	# Write start
	load_file.write("""
## This file is auto-generated by the script in the same folder, do not edit this file
scoreboard objectives add switch.music.current dummy
scoreboard objectives add switch.music.progress dummy
""")
	# Write the objectives
	for objective in objectives:
		load_file.write(f"scoreboard players set #{objective[0]} switch.music.progress {objective[1]}\n")

# Write tick file
os.makedirs("ticks", exist_ok = True)
with open("player_tick.mcfunction", "w", encoding="utf-8") as tick_file:

	# Write start
	tick_file.write("""
## This file is auto-generated by the script in the same folder, do not edit this file
""")

	# Write the objectives
	for i, objective in enumerate(objectives):

		# Write the tick condition
		remaining_bpm = objective[2]
		while remaining_bpm > 0:
			tick_file.write(f"execute if score @s switch.music.current matches {i+1} run function switch:music/ticks/{objective[0]}\n")
			remaining_bpm -= ALL_BPM

		# Write the tick function
		with open(f"ticks/{objective[0]}.mcfunction", "w", encoding="utf-8") as tick_function:
			tick_function.write(f"""
## This file is auto-generated by the script in the same folder, do not edit this file
execute if predicate switch:chance/0.5 run scoreboard players add @s switch.music.progress 1
data modify storage switch:temp input set value {{tick:0,name:"{objective[0]}"}}
scoreboard players operation #temp switch.data = @s switch.music.progress
scoreboard players remove #temp switch.data 40
execute store result storage switch:temp input.tick int 1 run scoreboard players get #temp switch.data
function switch:music/tick_macro with storage switch:temp input

# Stop if the music is over
execute if score #temp switch.data >= #{objective[0]} switch.music.progress run scoreboard players set @s switch.music.current -1
execute if score #temp switch.data >= #{objective[0]} switch.music.progress run scoreboard players set @s switch.music.progress 0
""")
	
	# Write end
	tick_file.write(f"execute if score @s switch.music.current matches -1 run function switch:music/next_music\n\n")

